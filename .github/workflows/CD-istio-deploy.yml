name: 'Deploy Bookinfo Application'

on:
  workflow_run:
    workflows: ["CD - Deploy Dev Infra", "CD - Deploy to Prod"]
    types: [completed]
  workflow_dispatch:

jobs:
  deploy-app:
    name: 'Deploy Istio and Bookinfo'
    runs-on: self-hosted
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Determine Environment from Trigger
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            BRANCH="${{ github.event.workflow_run.head_branch }}"
            if [ "$BRANCH" = "main" ]; then
              ENV="prod"
            else
              ENV="dev"
            fi
          else
            ENV="dev"
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "Detected environment: $ENV"
      
      - name: Set Environment Variables
        run: |
          echo "ENVIRONMENT=${{ steps.env.outputs.environment }}" >> $GITHUB_ENV
          echo "WORKING_DIR=azure/code/${{ steps.env.outputs.environment }}" >> $GITHUB_ENV
          echo "Deploying to environment: ${{ steps.env.outputs.environment }}"
          echo "Working directory: azure/code/${{ steps.env.outputs.environment }}"
      
      - name: Initialize Terraform Backend
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Initializing Terraform to access remote state..."
          terraform init

      - name: Configure AKS Credentials
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Getting AKS credentials from Terraform outputs"
          
          CLUSTER_NAME=$(terraform output -raw cluster_name)
          RG_NAME=$(terraform output -raw resource_group_name)
          
          echo "Cluster: $CLUSTER_NAME"
          echo "Resource Group: $RG_NAME"
          
          az aks get-credentials --resource-group "$RG_NAME" --name "$CLUSTER_NAME" --overwrite-existing
          
          kubectl get nodes
          kubectl get namespaces
      
      - name: Download and Install Istio
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Downloading Istio..."
          curl -L https://istio.io/downloadIstio | sh -
          
          ISTIO_DIR=$(ls -d istio-* | head -1)
          echo "Istio directory: $ISTIO_DIR"
          
          export PATH=$PWD/$ISTIO_DIR/bin:$PATH
          
          echo "Installing Istio in AKS cluster from GCR mirror"
          istioctl install \
            --set hub=gcr.io/istio-release \
            --set tag=1.27.2 \
            --set values.defaultRevision=default -y
          
          echo "Waiting for Istio components to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/istiod -n istio-system
          kubectl wait --for=condition=available --timeout=300s deployment/istio-ingressgateway -n istio-system

      - name: Verify Istio Installation
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Verifying Istio installation"
          
          kubectl get namespaces | grep istio
          kubectl get pods -n istio-system
          kubectl get svc -n istio-system
          
          echo "Getting LoadBalancer external IP"
          kubectl get svc istio-ingressgateway -n istio-system
      
      - name: Validate Istio Service Mesh
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Validating Istio service mesh components"
          
          echo "1) Checking sidecar injection in default namespace"
          kubectl get namespace default --show-labels | grep istio-injection=enabled && echo "Istio injection enabled" || echo "Istio injection not enabled"
          
          ISTIO_DIR=$(ls -d istio-* | head -1)
          export PATH=$PWD/$ISTIO_DIR/bin:$PATH
          
          sleep 10
          istioctl proxy-status || echo "Proxy status check failed - continuing"
          istioctl analyze || echo "Configuration analysis found issues"
          
          echo "Istio service mesh validation completed"

      - name: Enable Istio Injection in Default Namespace
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Enabling Istio injection for default namespace..."
          kubectl label namespace default istio-injection=enabled --overwrite
          kubectl get namespace default --show-labels

      - name: Deploy Bookinfo Application
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Deploying Bookinfo application"

          ISTIO_DIR=$(ls -d istio-* | head -1)
          kubectl apply -f $ISTIO_DIR/samples/bookinfo/platform/kube/bookinfo.yaml
          
          echo "Waiting for Bookinfo services"
          kubectl wait --for=condition=available --timeout=300s deployment/productpage-v1
          kubectl wait --for=condition=available --timeout=300s deployment/details-v1
          kubectl wait --for=condition=available --timeout=300s deployment/ratings-v1
          kubectl wait --for=condition=available --timeout=300s deployment/reviews-v1
          kubectl wait --for=condition=available --timeout=300s deployment/reviews-v2
          kubectl wait --for=condition=available --timeout=300s deployment/reviews-v3

      - name: Configure Bookinfo Gateway
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Configuring Bookinfo gateway"

          ISTIO_DIR=$(ls -d istio-* | head -1)
          kubectl apply -f $ISTIO_DIR/samples/bookinfo/networking/bookinfo-gateway.yaml
          
          kubectl get gateway
          kubectl get virtualservice

      - name: Install Prometheus, Grafana, and Kiali
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Installing Prometheus, Grafana, and Kiali"
          
          ISTIO_DIR=$(ls -d istio-* | head -1)
          
          echo "Installing Prometheus..."
          kubectl apply -f $ISTIO_DIR/samples/addons/prometheus.yaml
          
          echo "Installing Grafana..."
          kubectl apply -f $ISTIO_DIR/samples/addons/grafana.yaml
          
          echo "Installing Kiali..."
          kubectl apply -f $ISTIO_DIR/samples/addons/kiali.yaml
          
          echo "Waiting for observability components to be ready"
          kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n istio-system || echo "Prometheus timeout - continuing"
          kubectl wait --for=condition=available --timeout=300s deployment/grafana -n istio-system || echo "Grafana timeout - continuing"
          kubectl wait --for=condition=available --timeout=300s deployment/kiali -n istio-system || echo "Kiali timeout - continuing"
          
          echo "Prometheus, Grafana, and Kiali installation completed"

      - name: Expose Grafana
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Exposing Kiali with LoadBalancer service"
          
          kubectl patch service grafana -n istio-system -p '{"spec":{"type":"LoadBalancer"}}'
          kubectl get svc -n istio-system
          
          Grafana_IP=$(kubectl get svc grafana -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          echo "Grafana LoadBalancer IP: $Grafana_IP"

      - name: Initialize Test Tracking
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          mkdir -p test-results
          echo "0" > test-results/failed-tests.txt
          echo "" > test-results/failures.txt

      - name: Verify Application Deployment
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Verifying application deployment"

          kubectl get services
          kubectl get svc -n istio-system
          kubectl get pods -n istio-system
          kubectl get pods
          kubectl get pods -o wide
          kubectl get gateway bookinfo-gateway
          kubectl get virtualservice bookinfo
      
      - name: Run Basic Tests
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Running basic application tests"
          
          echo "1. Checking pod status..."
          kubectl get pods -o wide
          
          echo "2. Checking services..."
          kubectl get svc
          
          echo "3. Checking gateway..."
          kubectl get gateway bookinfo-gateway
          
          echo "4. Checking virtual service..."
          kubectl get virtualservice bookinfo
          
          echo "Basic tests completed"

      - name: Get URLs
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Application and Dashboard URLs"
          echo "============================="
          
          EXTERNAL_IP=$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          KIALI_IP=$(kubectl get svc kiali -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "Bookinfo App: http://$EXTERNAL_IP/productpage"
          echo "Grafana: http://$GRAFANA_IP:20001"
          echo "Prometheus: kubectl port-forward -n istio-system svc/prometheus 9090:9090"

      - name: Test Summary
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          failed_tests=$(cat test-results/failed-tests.txt)
          
          echo "TEST RESULTS SUMMARY"
          echo "==================="
          echo "Total Failed Tests: $failed_tests"
          
          if [ "$failed_tests" -eq 0 ]; then
            echo "ALL TESTS PASSED"
          else
            echo "Test Failures:"
            cat test-results/failures.txt
          fi
          
          echo "Failed Tests: $failed_tests" > test-results/summary.txt
          echo "Date: $(date -u)" >> test-results/summary.txt

      - name: Collect Deployment Info
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Collecting deployment information"

          mkdir -p deployment-info
          cp -r test-results deployment-info/ 2>/dev/null || echo "No test results"
          
          cat > deployment-info/access-urls.txt << EOF
          BOOKINFO DEPLOYMENT COMPLETED
          =============================
          Environment: ${{ env.ENVIRONMENT }}
          Date: $(date -u)
          Pipeline: ${{ github.run_number }}
          
          ACCESS URLs:
          EOF
          
          EXTERNAL_IP=$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          KIALI_IP=$(kubectl get svc kiali -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "Bookinfo App: http://$EXTERNAL_IP/productpage" >> deployment-info/access-urls.txt
          echo "Grafana: http://$GRAFANA_IP:20001" >> deployment-info/access-urls.txt
          
          echo "" >> deployment-info/access-urls.txt
          echo "SERVICE STATUS:" >> deployment-info/access-urls.txt
          kubectl get svc -n istio-system | grep -E "(ingressgateway|grafana)" >> deployment-info/access-urls.txt
          
          kubectl get pods -o wide > deployment-info/pod-status.txt
          kubectl get pods -n istio-system | grep -E "(grafana|kiali|prometheus)" > deployment-info/observability-pods.txt

      - name: Upload Essential Deployment Info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bookinfo-${{ env.ENVIRONMENT }}-${{ github.run_number }}
          path: ${{ env.WORKING_DIR }}/deployment-info/
          retention-days: 7 

      - name: Deployment Summary
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Deployment Summary"
          echo "=================="
          echo "Environment: ${{ env.ENVIRONMENT }}"
          
          failed_tests=$(cat test-results/failed-tests.txt 2>/dev/null || echo "0")
          echo "Test Results: $failed_tests tests failed"
          
          EXTERNAL_IP=$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          GRAFANA_IP=$(kubectl get svc grafana -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "Bookinfo URL: http://$EXTERNAL_IP/productpage"
          echo "Kiali URL: http://$KIALI_IP:20001"
