name: 'Deploy Bookinfo Application'

# Trigger after infrastructure deployment and allows manual runs
on:
  workflow_run:
    workflows: ["CD - Auto Deploy"]
    types: [completed]
  workflow_dispatch:

jobs:
  deploy-app:
    name: 'Deploy Istio and Bookinfo'
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AKS Credentials
        run: |
          echo "Getting AKS credentials"
          
          # Get cluster info from Terraform outputs
          CLUSTER_NAME=$(terraform output -raw cluster_name 2>/dev/null || echo "bookinfo-aks")
          RG_NAME=$(terraform output -raw resource_group_name 2>/dev/null || echo "bookinfo-rg")
          
          echo "Cluster: $CLUSTER_NAME"
          echo "Resource Group: $RG_NAME"
          
          # Configure kubectl
          az aks get-credentials --resource-group "$RG_NAME" --name "$CLUSTER_NAME" --overwrite-existing
          
          # Verify connection
          kubectl get nodes
          kubectl get namespaces

      - name: Download and Install Istio
        run: |
          echo "Downloading Istio..."
          
          # Download latest Istio
          curl -L https://istio.io/downloadIstio | sh -
          
          # Find Istio directory
          ISTIO_DIR=$(ls -d istio-* | head -1)
          echo "Istio directory: $ISTIO_DIR"
          
          # Add istioctl to PATH
          export PATH=$PWD/$ISTIO_DIR/bin:$PATH
          
          # Verify istioctl
          istioctl version --remote=false
          
          echo "Installing Istio in AKS cluster"
          istioctl install --set values.defaultRevision=default -y
          
          # Wait for Istio to be ready
          echo "Waiting for Istio components"
          kubectl wait --for=condition=available --timeout=300s deployment/istiod -n istio-system
          kubectl wait --for=condition=available --timeout=300s deployment/istio-ingressgateway -n istio-system

      - name: Verify Istio Installation
        run: |
          echo "Verifying Istio installation"
          
          # Get Istio namespaces
          kubectl get namespaces | grep istio
          
          # Get Istio pods
          kubectl get pods -n istio-system
          
          # Get Istio services
          kubectl get svc -n istio-system
          
          # Get LoadBalancer IP
          echo "Getting LoadBalancer external IP."
          kubectl get svc istio-ingressgateway -n istio-system
      
      - name: Validate Istio Service Mesh
        run: |
          echo "Validating Istio service mesh components"
          
          # Test 1: Verify sidecar injection
          echo "1) Checking sidecar injection in default namespace"
          kubectl get namespace default --show-labels | grep istio-injection=enabled && echo "Istio injection enabled" || echo "Istio injection not enabled"
          
          # Test 2: Check Istio proxy status
          ISTIO_DIR=$(ls -d istio-* | head -1)
          export PATH=$PWD/$ISTIO_DIR/bin:$PATH
          
          # Wait for proxy to be ready
          sleep 10
          istioctl proxy-status || echo "Proxy status check failed - continuing"
          
          # Test 3: Verify Istio configuration
          istioctl analyze || echo "Configuration analysis found issues"
          
          echo "Istio service mesh validation completed"

      - name: Allowing Istio Injection in Default Namespace
        run: |
          echo "Enabling Istio injection for default namespace..."
          kubectl label namespace default istio-injection=enabled --overwrite
          
          kubectl get namespace default --show-labels

      - name: Deploy Bookinfo Application
        run: |
          echo "Deploying Bookinfo application"

          # Find Istio directory
          ISTIO_DIR=$(ls -d istio-* | head -1)
          
          # Deploy Bookinfo services
          kubectl apply -f $ISTIO_DIR/samples/bookinfo/platform/kube/bookinfo.yaml
          
          # Wait for deployments
          echo "Waiting for Bookinfo services"
          kubectl wait --for=condition=available --timeout=300s deployment/productpage-v1
          kubectl wait --for=condition=available --timeout=300s deployment/details-v1
          kubectl wait --for=condition=available --timeout=300s deployment/ratings-v1
          kubectl wait --for=condition=available --timeout=300s deployment/reviews-v1
          kubectl wait --for=condition=available --timeout=300s deployment/reviews-v2
          kubectl wait --for=condition=available --timeout=300s deployment/reviews-v3

      - name: Configure Bookinfo Gateway
        run: |
          echo "Configuring Bookinfo gateway"

          # Find Istio directory
          ISTIO_DIR=$(ls -d istio-* | head -1)
          
          # Deploy gateway and virtual service
          kubectl apply -f $ISTIO_DIR/samples/bookinfo/networking/bookinfo-gateway.yaml
          
          # Verify gateway
          kubectl get gateway
          kubectl get virtualservice

      - name: Install Prometheus, Grafana, and Kiali
        run: |
          echo "Installing Prometheus, Grafana, and Kiali"
          
          # Find Istio directory
          ISTIO_DIR=$(ls -d istio-* | head -1)
          
          # Install only Prometheus, Grafana, and Kiali
          echo "Installing Prometheus..."
          kubectl apply -f $ISTIO_DIR/samples/addons/prometheus.yaml
          
          echo "Installing Grafana..."
          kubectl apply -f $ISTIO_DIR/samples/addons/grafana.yaml
          
          echo "Installing Kiali..."
          kubectl apply -f $ISTIO_DIR/samples/addons/kiali.yaml
          
          echo "Waiting for observability components to be ready"
          
          # Wait for deployments with timeout
          kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n istio-system || echo "Prometheus timeout - continuing"
          kubectl wait --for=condition=available --timeout=300s deployment/grafana -n istio-system || echo "Grafana timeout - continuing"
          kubectl wait --for=condition=available --timeout=300s deployment/kiali -n istio-system || echo "Kiali timeout - continuing"
          
          echo "Prometheus, Grafana, and Kiali installation completed"

      - name: Expose Grafana and Kiali
        run: |
          echo "Exposing Grafana and Kiali with LoadBalancer services"
          
          # Expose only Grafana and Kiali (NOT Prometheus)
          echo "Exposing Grafana..."
          kubectl expose service grafana --type=LoadBalancer --name=grafana-external -n istio-system || echo "Grafana service may already exist"
          
          echo "Exposing Kiali..."
          kubectl expose service kiali --type=LoadBalancer --name=kiali-external -n istio-system || echo "Kiali service may already exist"
          
          echo "Grafana and Kiali exposed (Prometheus kept internal)"

      # - name: Get Grafana and Kiali URLs
      #   run: |
      #     echo "Getting Grafana and Kiali access URLs"
          
      #     # Wait for LoadBalancer IPs to be assigned
      #     echo "Waiting for external IPs to be assigned"
      #     sleep 30
          
      #     echo ""
      #     echo "OBSERVABILITY DASHBOARD URLs:"
      #     echo "================================="
          
      #     # Grafana
      #     GRAFANA_IP=$(kubectl get svc grafana-external -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
      #     echo "GRAFANA:"
      #     if [ "$GRAFANA_IP" != "pending" ] && [ ! -z "$GRAFANA_IP" ] && [ "$GRAFANA_IP" != "null" ]; then
      #       echo "http://$GRAFANA_IP:3000"
      #       echo "Default login: admin/admin"
      #     else
      #       echo " External IP pending"
      #     fi
          
      #     # Kiali
      #     KIALI_IP=$(kubectl get svc kiali-external -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
      #     echo "KIALI:"
      #     if [ "$KIALI_IP" != "pending" ] && [ ! -z "$KIALI_IP" ] && [ "$KIALI_IP" != "null" ]; then
      #       echo "http://$KIALI_IP:20001"
      #     else
      #       echo " External IP pending"
      #     fi
          
      #     # Show Prometheus internal access
      #     echo "PROMETHEUS (Internal Only):"
      #     echo "kubectl port-forward -n istio-system svc/prometheus 9090:9090"
          
      #     echo ""
      #     echo "Check service status:"
      #     echo "kubectl get svc -n istio-system | grep external"

      - name: Initialize Test Tracking
        run: |
          mkdir -p test-results
          echo "0" > test-results/failed-tests.txt
          echo "" > test-results/failures.txt

      - name: Verify Application Deployment
        run: |
          echo "Verifying application deployment"

          # Get all services
          kubectl get services
          
          # Get all pods
          kubectl get pods
          
          # Get if pods
          kubectl get pods -o wide
          
          # Get gateway and virtual service
          kubectl get gateway bookinfo-gateway
          kubectl get virtualservice bookinfo
      
      - name: Run Test Suite
        run: |
          echo "Running comprehensive test suite"
          
          # Make all test scripts executable
          chmod +x tests/*.sh
          
          # Initialize counters
          total_tests=0
          passed_tests=0
          failed_tests=0
          
          # Run each test script
          for test_script in tests/test_*.sh; do
            if [ -f "$test_script" ]; then
              test_name=$(basename "$test_script" .sh)
              echo "Running $test_name..."
              
              total_tests=$((total_tests + 1))
              
              if bash "$test_script"; then
                echo "PASS: $test_name"
                passed_tests=$((passed_tests + 1))
              else
                echo "FAIL: $test_name"
                failed_tests=$((failed_tests + 1))
                echo "$test_name failed" >> test-results/failures.txt
              fi
            fi
          done
          
          # Save results
          echo "$failed_tests" > test-results/failed-tests.txt
          echo "Total: $total_tests, Passed: $passed_tests, Failed: $failed_tests" > test-results/summary.txt
          
          echo "Test execution completed: $failed_tests/$total_tests tests failed"

      - name: Get URLs
        run: |
          echo "Application and Dashboard URLs"
          echo "============================="
          
          # Get and display URLs
          EXTERNAL_IP=$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          GRAFANA_IP=$(kubectl get svc grafana-external -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          KIALI_IP=$(kubectl get svc kiali-external -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "Bookinfo App: http://$EXTERNAL_IP/productpage"
          echo "Grafana: http://$GRAFANA_IP:3000 (admin/admin)"
          echo "Kiali: http://$KIALI_IP:20001"
          echo "Prometheus: kubectl port-forward -n istio-system svc/prometheus 9090:9090"

      - name: Test Summary
        run: |
          failed_tests=$(cat test-results/failed-tests.txt)
          
          echo "TEST RESULTS SUMMARY"
          echo "==================="
          echo "Total Failed Tests: $failed_tests"
          
          if [ "$failed_tests" -eq 0 ]; then
            echo "ALL TESTS PASSED!"
          else
            echo "Test Failures:"
            cat test-results/failures.txt
          fi
          
          # Save summary
          echo "Failed Tests: $failed_tests" > test-results/summary.txt
          echo "Date: $(date -u)" >> test-results/summary.txt

      - name: Collect Deployment Info
        run: |
          echo "Collecting deployment information"

          # Create minimal artifacts directory
          mkdir -p deployment-info
          
          # Copy test results
          cp -r test-results deployment-info/ 2>/dev/null || echo "No test results"
          
          # 1. Access URLs
          cat > deployment-info/access-urls.txt << EOF
          BOOKINFO DEPLOYMENT COMPLETED
          =============================
          Date: $(date -u)
          Pipeline: ${{ github.run_number }}
          
          ACCESS URLs:
          EOF
          
          # Get essential IPs
          EXTERNAL_IP=$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          GRAFANA_IP=$(kubectl get svc grafana-external -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          KIALI_IP=$(kubectl get svc kiali-external -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "Bookinfo App: http://$EXTERNAL_IP/productpage" >> deployment-info/access-urls.txt
          echo "Grafana: http://$GRAFANA_IP:3000 (admin/admin)" >> deployment-info/access-urls.txt
          echo "Kiali: http://$KIALI_IP:20001" >> deployment-info/access-urls.txt
          echo "Prometheus: kubectl port-forward -n istio-system svc/prometheus 9090:9090" >> deployment-info/access-urls.txt
          
          # 2. Service Status
          echo "" >> deployment-info/access-urls.txt
          echo "SERVICE STATUS:" >> deployment-info/access-urls.txt
          kubectl get svc -n istio-system | grep -E "(ingressgateway|grafana-external|kiali-external)" >> deployment-info/access-urls.txt
          
          # 3. Pod Status
          kubectl get pods -o wide > deployment-info/pod-status.txt
          kubectl get pods -n istio-system | grep -E "(grafana|kiali|prometheus)" > deployment-info/observability-pods.txt
          

      - name: Upload Essential Deployment Info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bookinfo-essentials-${{ github.run_number }}
          path: deployment-info/
          retention-days: 7 

      - name: Deployment Summary
        run: |
          echo "BOOKINFO WITH GRAFANA & KIALI DEPLOYED!"
          echo "========================================"
          
          # Add test results
          failed_tests=$(cat test-results/failed-tests.txt 2>/dev/null || echo "0")
          echo "Test Results: $failed_tests tests failed"
          
          echo ""
          echo "Deployment Summary:"
          echo "- AKS cluster configured"
          echo "- Istio service mesh installed"
          echo "- Bookinfo application deployed"
          echo "- Gateway and routing configured"
          echo "- Prometheus installed (internal only)"
          echo "- Grafana exposed with LoadBalancer"
          echo "- Kiali exposed with LoadBalancer"
          echo ""
          
          echo "APPLICATION ACCESS:"
          echo "=================="
          EXTERNAL_IP=$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ ! -z "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "null" ]; then
            echo "Bookinfo App: http://$EXTERNAL_IP/productpage"
          else
            echo "Bookinfo App: External IP pending"
          fi
          
          echo ""
          echo "EXPOSED DASHBOARDS:"
          echo "=================="
          
          # Get external IPs for Grafana and Kiali 
          GRAFANA_IP=$(kubectl get svc grafana-external -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          KIALI_IP=$(kubectl get svc kiali-external -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
