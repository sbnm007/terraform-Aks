name: 'CD - Deploy to Prod'

on:
  workflow_run:
    workflows: ["CI - Branch-Specific Validation"]
    types: [completed]
    branches: [main]  # Only trigger when CI runs on main branch
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      
      auto_approve:
        description: 'Auto-approve apply/destroy'
        required: false
        default: false
        type: boolean

env:
  ENVIRONMENT: prod

jobs:
  deploy-prod:
    name: 'Deploy to Production'
    runs-on: self-hosted
    # Only deploy if PROD CI succeeded on main branch
    if: |
      (github.event.workflow_run.conclusion == 'success' && 
       github.event.workflow_run.head_branch == 'main') ||
      github.event_name == 'workflow_dispatch'
    
    environment: production  # GitHub environment with protection rules
    
    defaults:
      run:
        working-directory: environments/prod

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha || 'main' }}

      - name: Determine Action
        id: determine-action
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "action=apply" >> $GITHUB_OUTPUT
            echo "auto_approve=false" >> $GITHUB_OUTPUT  # Never auto-approve prod
            echo "üöÄ Auto-deployment triggered by successful PROD CI on main"
          else
            echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
            echo "auto_approve=${{ github.event.inputs.auto_approve }}" >> $GITHUB_OUTPUT
            echo "üìã Manual deployment triggered"
          fi

      - name: Production Deployment Warning
        run: |
          echo "üö® PRODUCTION DEPLOYMENT üö®"
          echo "============================"
          echo "Trigger: ${{ github.event_name }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Action: ${{ steps.determine-action.outputs.action }}"
          echo "Auto-approve: ${{ steps.determine-action.outputs.auto_approve }}"
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "Source branch: ${{ github.event.workflow_run.head_branch }}"
            echo "Source conclusion: ${{ github.event.workflow_run.conclusion }}"
            echo "‚úÖ Triggered by successful PROD CI on main branch"
          fi
          echo ""
          echo "‚ö†Ô∏è  This will affect PRODUCTION infrastructure!"

      - name: Check Azure Quota
        run: |
          echo "=== Checking Azure Quota ==="
          az network list-usages --location "West Europe" --query "[?name.value=='PublicIPAddresses']" --output table

      - name: Terraform Init
        run: |
          echo "=== Terraform Init ==="
          terraform init

      - name: Terraform Plan
        if: steps.determine-action.outputs.action == 'plan' || steps.determine-action.outputs.action == 'apply'
        run: |
          echo "=== Terraform Plan ==="
          terraform plan -out=tfplan-prod

      - name: Production Approval Gate
        if: steps.determine-action.outputs.action == 'apply' && github.event_name == 'workflow_run'
        run: |
          echo "üîí Production deployment requires manual approval"
          echo "This step will pause for manual review via GitHub Environment protection"
          echo "Approve in the GitHub Actions UI to proceed"

      - name: Terraform Apply
        if: steps.determine-action.outputs.action == 'apply'
        run: |
          if [ "${{ steps.determine-action.outputs.auto_approve }}" = "true" ]; then
            echo "=== Auto-approved Apply (Production) ==="
            terraform apply -auto-approve tfplan-prod
          else
            echo "=== Applying with confirmation ==="
            terraform apply -auto-approve tfplan-prod
          fi

      - name: Post-Deploy Configuration
        if: steps.determine-action.outputs.action == 'apply'
        run: |
          echo "=== Post-Deployment Tasks ==="
          
          # Get kubectl config
          az aks get-credentials --resource-group prod-bookinfo-rg --name prod-bookinfo-aks --overwrite-existing
          
          # Wait for cluster readiness
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Terraform Destroy
        if: steps.determine-action.outputs.action == 'destroy'
        run: |
          echo "=== WARNING: Destroying Production Environment ==="
          echo "This will DELETE all production resources!"
          
          if [ "${{ steps.determine-action.outputs.auto_approve }}" = "true" ]; then
            terraform destroy -auto-approve
          else
            terraform destroy
          fi

      - name: Deployment Summary
        run: |
          echo "=== Production Deployment Complete ==="
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Action: ${{ steps.determine-action.outputs.action }}"
          echo "Trigger: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "‚úÖ Triggered by successful PROD CI on main branch"
          fi
          echo "Status: ‚úÖ SUCCESS"

      - name: Notify Production Deployment
        if: steps.determine-action.outputs.action == 'apply'
        run: |
          echo "üéâ Production deployment completed successfully!"
          echo "Production environment is now updated"
          echo "Please verify all services are functioning correctly"