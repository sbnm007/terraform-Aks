# name: 'CD - Deploy to Prod'

# on:
#   workflow_run:
#     workflows: ["CI - Branch-Specific Validation"]
#     types: [completed]
#     # Remove branches filter - doesn't work!
#   workflow_dispatch:
#     inputs:
#       action:
#         description: 'Deployment Action'
#         required: true
#         default: 'plan'
#         type: choice
#         options:
#         - plan
#         - apply
#         - destroy
      
#       auto_approve:
#         description: 'Auto-approve apply/destroy'
#         required: false
#         default: false
#         type: boolean

# env:
#   ENVIRONMENT: prod

# jobs:
#   check-trigger:
#     name: 'Check Trigger Conditions'
#     runs-on: self-hosted
#     outputs:
#       should_deploy: ${{ steps.check.outputs.should_deploy }}
#     steps:
#       - name: Check Deployment Conditions
#         id: check
#         run: |
#           if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
#             echo "should_deploy=true" >> $GITHUB_OUTPUT
#             echo "‚úÖ Manual trigger - will deploy"
#           elif [ "${{ github.event_name }}" = "workflow_run" ]; then
#             BRANCH="${{ github.event.workflow_run.head_branch }}"
#             CONCLUSION="${{ github.event.workflow_run.conclusion }}"
            
#             echo "Branch: $BRANCH"
#             echo "Conclusion: $CONCLUSION"
            
#             if [ "$BRANCH" = "main" ] && [ "$CONCLUSION" = "success" ]; then
#               echo "should_deploy=true" >> $GITHUB_OUTPUT
#               echo "‚úÖ CI passed on main - will deploy to PROD"
#             else
#               echo "should_deploy=false" >> $GITHUB_OUTPUT
#               echo "‚ùå Not deploying to PROD:"
#               echo "   - Branch is '$BRANCH' (expected 'main')"
#               echo "   - CI status is '$CONCLUSION' (expected 'success')"
#             fi
#           else
#             echo "should_deploy=false" >> $GITHUB_OUTPUT
#             echo "‚ùå Unknown trigger type"
#           fi

#   deploy-prod:
#     name: 'Deploy to Production'
#     runs-on: self-hosted
#     needs: check-trigger
#     if: needs.check-trigger.outputs.should_deploy == 'true'
    
#     environment: production
    
#     defaults:
#       run:
#         working-directory: azure/code/prod  # ‚úÖ Fixed path

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4
#         with:
#           ref: ${{ github.event.workflow_run.head_sha || github.ref }}

#       - name: Production Deployment Warning
#         run: |
#           echo "üö® PRODUCTION DEPLOYMENT üö®"
#           echo "Environment: ${{ env.ENVIRONMENT }}"
#           echo "Trigger: ${{ github.event_name }}"
#           if [ "${{ github.event_name }}" = "workflow_run" ]; then
#             echo "Action: apply (auto)"
#             echo "Source branch: ${{ github.event.workflow_run.head_branch }}"
#           else
#             echo "Action: ${{ github.event.inputs.action }}"
#           fi

#       - name: Terraform Init
#         run: terraform init

#       - name: Terraform Plan
#         if: github.event.inputs.action == 'plan' || github.event_name == 'workflow_run'
#         run: terraform plan -out=tfplan-prod

#       - name: Terraform Apply
#         if: github.event.inputs.action == 'apply' || github.event_name == 'workflow_run'
#         run: terraform apply -auto-approve tfplan-prod

#       - name: Terraform Destroy
#         if: github.event.inputs.action == 'destroy'
#         run: terraform destroy -auto-approve

#       - name: Post-Deployment Check
#         if: (github.event.inputs.action == 'apply' || github.event_name == 'workflow_run') && success()
#         run: |
#           # Get cluster info from Terraform outputs
#           CLUSTER_NAME=$(terraform output -raw cluster_name)
#           RG_NAME=$(terraform output -raw resource_group_name)
          
#           az aks get-credentials --resource-group "$RG_NAME" --name "$CLUSTER_NAME" --overwrite-existing
#           kubectl wait --for=condition=Ready nodes --all --timeout=300s